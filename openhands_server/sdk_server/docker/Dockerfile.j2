# syntax=docker/dockerfile:1.7
{% set BUILD_FROM_SOURCE = build_from_source|default(False) %}
{% set BASE_IMAGE = base_image %}
{% set BINARY = binary_filename %}
{% set USERNAME = "openhands" %}
{% set UID = 10001 %}
{% set GID = 10001 %}
{% set PORT = port|default(8080) %}

{% if BUILD_FROM_SOURCE %}
# =========================
# Builder (linux/amd64)
# =========================
FROM --platform=linux/amd64 python:3.12-bookworm AS builder

# Pin uv for reproducibility
COPY --from=ghcr.io/astral-sh/uv /uv /uvx /bin/

# Create fixed uid/gid non-root user
RUN groupadd -g {{ GID }} {{ USERNAME }} \
 && useradd -m -u {{ UID }} -g {{ GID }} -s /usr/sbin/nologin {{ USERNAME }}

USER {{ USERNAME }}
WORKDIR /src

# Cache dirs
ENV UV_CACHE_DIR=/home/{{ USERNAME }}/.cache/uv
ENV PIP_CACHE_DIR=/home/{{ USERNAME }}/.cache/pip

# 1) Lockfiles first (cacheable)
COPY --chown={{ USERNAME }}:{{ USERNAME }} pyproject.toml uv.lock* README.md LICENSE ./

# 2) Sync deps into an isolated venv (no dev extras)
#    This creates /src/.venv with a full Python interpreter + site-packages
RUN --mount=type=cache,target=/home/{{ USERNAME }}/.cache/uv,uid={{ UID }},gid={{ GID }} \
    --mount=type=cache,target=/home/{{ USERNAME }}/.cache/pip,uid={{ UID }},gid={{ GID }} \
    uv venv && . .venv/bin/activate && uv sync --frozen --no-dev

# 3) Copy the rest of your source
COPY --chown={{ USERNAME }}:{{ USERNAME }} . .

# 4) Install the project into the venv (editable not needed in prod; use std install)
RUN . .venv/bin/activate && pip install --no-deps --no-cache-dir .
{% endif %}

# =========================
# Runtime (linux/amd64)
# =========================
FROM --platform=linux/amd64 {{ BASE_IMAGE }}

# Non-root user (same UID/GID)
RUN (getent group {{ GID }} || groupadd -g {{ GID }} {{ USERNAME }}) && \
    (id -u {{ USERNAME }} >/dev/null 2>&1 || useradd -m -u {{ UID }} -g {{ GID }} -s /usr/sbin/nologin {{ USERNAME }})

# Install certs if apt is available
RUN (command -v apt-get >/dev/null && apt-get update && \
     apt-get install -y --no-install-recommends ca-certificates && \
     rm -rf /var/lib/apt/lists/*) || true

{% if BUILD_FROM_SOURCE %}
# DEV MODE
# --- Source runtime: copy venv + app source ---
USER {{ USERNAME }}
WORKDIR /app

# Copy prebuilt venv and code from builder
# Note: The venv includes the Python interpreter; use a glibc-compatible base.
COPY --chown={{ USERNAME }}:{{ USERNAME }} --from=builder /src/.venv /app/.venv
COPY --chown={{ USERNAME }}:{{ USERNAME }} --from=builder /src /app

# Ensure the venv is first on PATH
ENV VIRTUAL_ENV=/app/.venv
ENV PATH="/app/.venv/bin:${PATH}"

# Labels
LABEL org.opencontainers.image.title="{{ BINARY }} (source mode)" \
      org.opencontainers.image.vendor="All Hands AI" \
      org.opencontainers.image.base.name="{{ BASE_IMAGE }}"

EXPOSE {{ PORT }}

# If your server entry is a module, prefer -m. Adjust to your actual entrypoint.
# Example: `openhands_server.sdk_server:main` -> `python -m openhands_server.sdk_server`
ENTRYPOINT ["python", "-m", "openhands_server.sdk_server"]
{% else %}
# PRODUCTION MODE
# --- Binary runtime (unchanged) ---
# Copy binary
COPY {{ BINARY }} /usr/local/bin/{{ BINARY }}
RUN chmod +x /usr/local/bin/{{ BINARY }} && \
    chown {{ USERNAME }}:{{ USERNAME }} /usr/local/bin/{{ BINARY }}

# Labels
LABEL org.opencontainers.image.title="{{ BINARY }}" \
      org.opencontainers.image.vendor="All Hands AI" \
      org.opencontainers.image.base.name="{{ BASE_IMAGE }}"

USER {{ USERNAME }}
WORKDIR /app
EXPOSE {{ PORT }}
ENTRYPOINT ["/usr/local/bin/{{ BINARY }}"]
{% endif %}
